int ret1=0; //returns outside of if
      int ret2=0; //if there's an if
      if(ast->type==NODETYPE_FUNC_DECL){
          func++;
      }
      if(ast->size==0){
          if((ast->type==NODETYPE_RETURN || (ret1>=1 && ret2>=2 && in_if==1) || (in_if==0 && ret1>=1)) && func>=1){

              return 0;
          }
          else if (func==0){
              return 0;
          }
	  else{
		return 1;
	}

      }
      if((ast->type==NODETYPE_BREAK || ast->type==NODETYPE_CONTINUE) && !is_for){

        return 1;
      }
	
       //if there's a return outside of if else
          if (ast->type == NODETYPE_RETURN && in_if==0 && func>=1){
              ret2+=1;
              ret1+=1;
        }
          if(ast->type==NODETYPE_CONTROL_IF_ELSE){
             in_if=1;
             if(ast->children[2]==NULL){

                 CheckImproperStatements(ast->children[1], is_for, incorrect_returns);
             }
             else{
                 CheckImproperStatements(ast->children[1], is_for, incorrect_returns);
                 CheckImproperStatements(ast->children[2]->children[0], is_for, incorrect_returns);
             }
          }
         if(ast->type==NODETYPE_CONTROL_FOR){
             is_for=1;
         }
         if(in_if&&ast->type==NODETYPE_RETURN){ret2+=1;}

          for(int i = 0; i<ast->size;i++){

              return CheckImproperStatements(ast->children[i], is_for, incorrect_returns);
             }